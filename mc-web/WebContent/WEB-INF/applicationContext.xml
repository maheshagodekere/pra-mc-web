<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	   		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	   		http://www.springframework.org/schema/context
	   		http://www.springframework.org/schema/context/spring-context-3.1.xsd
			http://www.springframework.org/schema/mvc
			http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">


	<context:property-placeholder
		properties-ref="deployProperties" />

	<!-- Activates various annotations to be detected in bean classes -->
	<context:annotation-config />

	<!-- Scans the classpath for annotated components that will be auto-registered
		as Spring beans. For example @Controller and @Service. Make sure to set the
		correct base-package -->
	<context:component-scan base-package="com.pradeya.cast" />

	<!-- Configures the annotation-driven Spring MVC Controller programming
		model. Note that, with Spring 3.0, this tag works in Servlet MVC only! -->
	<!-- <mvc:annotation-driven /> -->
	<context:annotation-config />
	<mvc:resources mapping="/resources/**" location="/resources/" />
	<import resource="spring-data.xml" />
	<!-- Imports logging configuration -->
	<!-- <import resource="trace-context.xml"/> -->
	
	<bean id="deployProperties"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean"
		p:location="/WEB-INF/spring.properties" />

	<!-- ###### Notification Scheduler and Worker threads for GCM START ###### -->

	<!-- The bean that does the actual work -->
	<bean id="gcmNotifier" class="com.pradeya.cast.service.GoogleNotificationService" />

	<bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"
		p:corePoolSize="5" p:maxPoolSize="25" />

	<!-- SIMPLE JOB -->
	<!-- A simple job factory: MethodInvokingJobDetailFactoryBean If you just 
		need to invoke a method from an object, use this bean factory Using the MethodInvokingJobDetailFactoryBean -->
	<bean id="methodJobDetailBean"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
		p:concurrent="false" p:targetObject-ref="gcmNotifier" p:targetMethod="dispatch" />

	<!-- A simple trigger: SimpleTriggerBean See: 25.6.3 Wiring up jobs using 
		triggers and the SchedulerFactoryBean @http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/scheduling.html -->
	<!-- startDelay: Delay 10 seconds repeatInterval: Repeat every 10 seconds -->
	<bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean"
		p:jobDetail-ref="methodJobDetailBean" p:startDelay="5000"
		p:repeatInterval="30000" />
    
	<!-- SCHEDULER -->

	<!-- Schedules the jobs Triggers need to be scheduled. Spring offers a SchedulerFactoryBean 
		that exposes triggers to be set as properties. SchedulerFactoryBean schedules 
		the actual jobs with those triggers See: 25.6.3 Wiring up jobs using triggers 
		and the SchedulerFactoryBean @http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/scheduling.html -->
	<!--bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean"
		p:waitForJobsToCompleteOnShutdown="true">
		<property name="triggers">
			<list>
				<ref bean="simpleTrigger" />
				
			</list>
		</property>
	</bean-->
   
	<!-- ###### Notification Scheduler and Worker threads for GCM END ###### -->

</beans>